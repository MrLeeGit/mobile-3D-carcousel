let fs = require('fs');
let program = require('commander');
let pkg = require('../package.json');
let ProgressBar = require('progress');
let tinify = require("tinify");
let cwd = process.cwd();
const LOCALPATH = process.env.HOME || process.env.USERPROFILE; //本地根目录
let FILENAME = LOCALPATH + '/' + 'minpic.json';

const MINPICFILE = 'minpic.txt';
let changeKeyNumber = 0;
let bar;
let imglist = [];
let data = {};

//创建key目录
function create(cb) {
    fs.stat(FILENAME, (err, body) => {
        if (err) {
            let json = {
                keylist: []
            }
            fs.appendFileSync(FILENAME, JSON.stringify(json, null, 4))
        }
        data = require(FILENAME);
        tinify.key = data.key;
        initKeyIndex = data.keylist.indexOf(data.key);
        keyIndex = data.keylist.indexOf(data.key);
        cb && cb();
    })
};
//压缩图片
function zip(item) {
    let image = tinify.fromFile(item.source);
    image.toFile(item.target, (rs) => {
        if (rs && /limit/.test(rs.message)) {
            if (changeKey()) {
                zip(item);
            };
        } else if (!rs) {
            bar.tick();
            addMinifyInfo(item.ino);
        }
    });
};
//获取所有图片路径
function getAllImg(source, sourceBtn, target, targetBtn) {
    let obj = fs.statSync(source);

    if (obj.isFile()) {
        if (isImage(source)) {
            imglist.push({
                source: source,
                target: targetBtn ? target : source,
                ino: source
            });
        }
    } else if (obj.isDirectory()) {
        let dir = source.substr(source.lastIndexOf('/') + 1);
        //排除不用压缩的文件夹

            if(/.git|.DS_Store|node_modules/.test(dir)){
                return;
            }

        //obj是目录，并且非特殊目录
        let arr = fs.readdirSync(source);
        arr.forEach((item, index) => {

            if (isImage(source + '/' + item)) {
                imglist.push({
                    source: source + '/' + item,
                    target: targetBtn ? target + '/' + item : source + '/' + item,
                    ino: source + '/' + item
                });

            } else if (sourceBtn) { // 如果source存在，只压缩一级目录
                return;
            } else {
                let stat = fs.statSync(source + '/' + item);
                if (stat.isDirectory()) {
                    getAllImg(source + '/' + item, sourceBtn, target, targetBtn);
                }
            }
        });
    }
}
//判断是不是图片
function isImage(url) {
    let stat = fs.statSync(url);
    if (stat.isFile() && /png|jpg|jpeg/.test(url)) {
        return true;
    } else {
        return false;
    }
};
//判断key
function changeKey() {
    //防止用户添加tinypng key重复
    let nextIndex = data.keylist.indexOf(data.key) + 1;
    changeKeyNumber++;
    if (data.keylist.length <= nextIndex) {
        nextIndex = 0;
    }
    if (changeKeyNumber == data.keylist.length) {
        console.log('需要新增key');
        return false;
    }
    data.key = data.keylist[nextIndex];
    tinify.key = data.key;
    fs.writeFileSync(FILENAME, JSON.stringify(data, null, 4));
    return true;
};
//获取压缩过的图片信息
function getMinedList() {
    if (!fs.existsSync(MINPICFILE)) {
        fs.appendFileSync(MINPICFILE, '');
    }
    return fs.readFileSync(MINPICFILE, 'utf-8').split('\n');
};
//添加压缩信息
function addMinifyInfo(info) {
    //有重复信息就不添加了
    if(getMinedList().indexOf(info) != -1){
        return;
    };
    fs.appendFile(MINPICFILE, '\n' + info, (err, body) => {
        if (err) {
            throw err;
        }
    })
};
//判断图片是否被压缩过
function isMinify(list, ino) {
    if (list.includes(String(ino))) {
        return true;
    } else {
        return false;
    }
};

module.exports.build = (source, target) => {
    create(() => {
        if (!data.key && data.keylist.length == 0) {
            console.log('请添加key');
            return;
        } else if (!data.key && data.keylist.length != 0) {
            data.key = data.keylist[0];
            tinify.key = data.key;
            fs.writeFileSync(FILENAME, JSON.stringify(data, null, 4));
        }

        //找到所有图片
        getAllImg(source ? cwd + '/' + source : cwd, source, target ? cwd + '/' + target : cwd, target)
        if (!imglist.length) {
            console.log('一张图片都没有');
            return;
        }
        //在线压缩
        bar = new ProgressBar(':bar', {
            total: imglist.length,
            width: 100
        });
        let minifyInfoList = getMinedList(); //压缩后的图片信息
        imglist.forEach((item, index) => {
            if (!program.force && isMinify(minifyInfoList, item.ino)) {
                bar.tick();
                return;
            }
            zip(item);
        })
    });
}
module.exports.add = (key) => {
    create(() => {
        if(!key){
            console.log('您忘填key啦')
        }else if (data.keylist.indexOf(key) != -1) {
            console.log('已存在此key');
        } else {
            key && data.keylist.push(key);
            fs.writeFileSync(FILENAME, JSON.stringify(data, null, 4));
            console.log('添加成功');
        }
    });
}
module.exports.remove = (key) => {
    create(() => {
        let pos = data.keylist.indexOf(key);
        if (pos == -1) {
            console.log('不存在此key')
            return;
        }
        data.keylist.splice(pos, 1);
        fs.writeFileSync(FILENAME, JSON.stringify(data, null, 4));
        console.log('删除成功');
    })
}
module.exports.list = () => {
    create(() => {
        console.log(JSON.parse(fs.readFileSync(FILENAME, 'utf-8')).keylist)
    });
}
module.exports.rootpath = () => {
    create(() => {
        console.log(LOCALPATH)
    });
}
