var path = require('path')
var utils = require('./utils')
var webpack = require('webpack')
var config = require('./config')
var merge = require('webpack-merge')
var baseWebpackConfig = require('./webpack.base.conf')
var HtmlWebpackPlugin = require('html-webpack-plugin')
var ExtractTextPlugin = require('extract-text-webpack-plugin')
var BabiliPlugin = require("babili-webpack-plugin");
var glob = require('glob');
var marauderConfig = require(path.resolve(process.cwd(),'marauder.config.js'))
var webpackConfig = {
	/* 一些webpack基础配置 */
};
var env = config.build.env
var webpackConfig = merge(baseWebpackConfig, {
	entry: entries,
	module: {
		rules: utils.styleLoaders({
			sourceMap: config.build.productionSourceMap,
			extract: true
		})
	},
	devtool: config.build.productionSourceMap ? '#source-map' : false,
	output: {
		path: config.build.assetsRoot,
		filename: marauderConfig.hash ? utils.assetsPath('js/[name].[chunkhash:8].js') : utils.assetsPath('js/[name].js'),
		chunkFilename: marauderConfig.hash ? utils.assetsPath('js/[id].[chunkhash:8].js') : utils.assetsPath('js/[id].js')
	},
	plugins: [
		new webpack.DefinePlugin({
			'process.env': env
		}),
		new BabiliPlugin(),
		new webpack.optimize.UglifyJsPlugin({
			compress: {
				warnings: false
			},
			sourceMap: false
		}),
		new ExtractTextPlugin({
			filename: marauderConfig.hash ? utils.assetsPath('css/[name].[chunkhash:8].css') : utils.assetsPath('css/[name].css')
		}),
		new webpack.optimize.CommonsChunkPlugin({
			name: 'manifest',
			chunks: ['vendor']
		})
	]
})
// 获取指定路径下的入口文件
function getEntries(globPath) {
	var files = glob.sync(globPath),
		entries = {};
	files.forEach(function(filepath) {
		// 取倒数第二层(view下面的文件夹)做包名
		var split = filepath.split('/');
		var name = split[split.length - 2];
		entries[name] = './' + filepath;
	});
	return entries;
}
var entries = getEntries('src/view/**/index.js');
Object.keys(entries).forEach(function(name) {
	// 每个页面生成一个entry，如果需要HotUpdate，在这里修改entry
	webpackConfig.entry[name] = entries[name];
	// 每个页面生成一个html
	var plugin = new HtmlWebpackPlugin({
		// 生成出来的html文件名
		filename: process.cwd() + '/dist/' + name + '.html',
		// 每个html的模版，这里多个页面使用同一个模版
		template: process.cwd() + '/src/view/' + name + '/index.html',
		minify: {
			removeComments: false,
			collapseWhitespace: false,
			removeAttributeQuotes: false
		},
		// 自动将引用插入html
		inject: true,
		// 每个html引用的js模块，也可以在这里加上vendor等公用模块
		chunks: [name]
	});
	webpackConfig.plugins.push(plugin);
})
if (config.build.productionGzip) {
	var CompressionWebpackPlugin = require('compression-webpack-plugin')
	webpackConfig.plugins.push(new CompressionWebpackPlugin({
		asset: '[path].gz[query]',
		algorithm: 'gzip',
		test: new RegExp('\\.(' + config.build.productionGzipExtensions.join('|') + ')$'),
		threshold: 10240,
		minRatio: 0.8
	}))
}
if (config.build.bundleAnalyzerReport) {
	var BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin
	webpackConfig.plugins.push(new BundleAnalyzerPlugin())
}
module.exports = webpackConfig
