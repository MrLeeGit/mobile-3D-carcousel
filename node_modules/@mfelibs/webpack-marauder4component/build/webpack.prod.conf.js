var path = require('path')
var utils = require('./utils')
var webpack = require('webpack')
var config = require('./config')
var merge = require('webpack-merge')
var baseWebpackConfig = require('./webpack.base.conf')
var HtmlWebpackPlugin = require('html-webpack-plugin')
var ExtractTextPlugin = require('extract-text-webpack-plugin')
var BabiliPlugin = require("babili-webpack-plugin");
var moduleDependency = require("@mfelibs/base-webpack-module_dependency");
var FastUglifyJsPlugin = require('fast-uglifyjs-plugin');

var cwd = process.cwd();
var glob = require('glob');
var OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');
var marauderConfig = require(path.resolve(process.cwd(), 'marauder.config.js'))
var webpackConfig = {
    /* 一些webpack基础配置 */
};
var env = config.build.env;


var webpackConfig = merge(baseWebpackConfig, {
        entry: {
            "main": "./src/index.js",
            "demo": "./test/index.js"
        },
        module: {
            rules: utils.styleLoaders({
                sourceMap: config.build.productionSourceMap,
                extract: true
            })
        },
        devtool: config.build.productionSourceMap ? '#source-map' : false,
        output: {
            path: config.build.assetsRoot,
            filename: marauderConfig.hash ? utils.assetsPath('[name].[chunkhash:8].min.js') : utils.assetsPath('[name].min.js'),
            chunkFilename: marauderConfig.hash ? utils.assetsPath('[id].[chunkhash:8].min.js') : utils.assetsPath('[id].min.js')
        },
        plugins: [
            // new moduleDependency(),
            new webpack.DefinePlugin({
                'process.env': env
            }),
            new BabiliPlugin(),
            // new webpack.optimize.UglifyJsPlugin({
            //     compress: {
            //         warnings: false
            //     },
            //     sourceMap: false
            // }),
            new FastUglifyJsPlugin({
                compress: {
                    warnings: false
                },
                // set debug as true to output detail cache information           
                debug: false,
                // enable cache by default to improve uglify performance. set false to turn it off
                cache: false,
                // root directory is the default cache path. it can be configured by following setting
                cacheFolder: path.resolve(__dirname, '.otherFolder'),
                // num of worker process default ,os.cpus().length
                workerNum: 2
            }),
            new ExtractTextPlugin({
                filename: marauderConfig.hash ? utils.assetsPath('[name].[chunkhash:8].min.css') : utils.assetsPath('[name].min.css')
            }),
            new webpack.optimize.CommonsChunkPlugin({
                name: 'manifest',
                chunks: ['vendor']
            }),
            new OptimizeCssAssetsPlugin()
        ]
    })
    // 获取指定路径下的入口文件
function getEntries(globPath) {
    var files = glob.sync(globPath),
        entries = {};
    files.forEach(function(filepath) {
        // 取倒数第二层(view下面的文件夹)做包名
        var split = filepath.split('/');
        var name = split[split.length - 2];
        entries[name] = filepath;
    });
    return entries;
}
var plugin = new HtmlWebpackPlugin({
    // 生成出来的html文件名
    filename: process.cwd() + '/dist/demo.html',

    // 每个html的模版，这里多个页面使用同一个模版
    template: 'html-withimg-loader?min=false!' + process.cwd() + '/index.html',
    minify: false,
    // 自动将引用插入html
    inject: true,

    chunks: ["demo"]
});
webpackConfig.plugins.push(plugin);
if (config.build.productionGzip) {
    var CompressionWebpackPlugin = require('compression-webpack-plugin')
    webpackConfig.plugins.push(new CompressionWebpackPlugin({
        asset: '[path].gz[query]',
        algorithm: 'gzip',
        test: new RegExp('\\.(' + config.build.productionGzipExtensions.join('|') + ')$'),
        threshold: 10240,
        minRatio: 0.8
    }))
}
if (config.build.bundleAnalyzerReport) {
    var BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin
    webpackConfig.plugins.push(new BundleAnalyzerPlugin())
}
module.exports = webpackConfig