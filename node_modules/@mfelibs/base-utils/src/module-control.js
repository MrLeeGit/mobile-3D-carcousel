import $ from './zepto.js'
import {
  SID, getEl, runtime, context, registerRuntime, destroyRuntime
} from './context.js'

class BaseModule {
  /**
   * 模块基类
   * @param  {Element | $Element}  el      dom 节点，可为原生或 zeto 对象
   * @param  {Object}  options 自定义配置信息
   * @param  {Boolean} isRoot  是否将自定义配置作为根配置
   */
  constructor(el, options = {}, isRoot = false) {
    const $el = this.$el = getEl(el)

    // 模块实例 on 事件集合
    let _evtOn = {}

    // 模块实例 one 事件集合
    let _evtOne = {}

    if(!$el) throw new Error('can\'t find element')

    const config = this._getDOMConfig(el)

    this.__options = isRoot ? $.extend(true, config, options) : $.extend(true, options, config)

    this.on = function(key, fn) {
      if(_evtOn[key] === undefined) {
        _evtOn[key] = []
      }

      _evtOn[key].push(fn)
    }

    this.one = function(key, fn) {
      if(_evtOne[key] === undefined) {
        _evtOne[key] = []
      }

      _evtOne[key].push(fn)
    }

    this.off = function(key) {
      _evtOn[key] = []
      _evtOne[key] = []
    }

    /**
     * 触发事件
     * @param  {String}  事件名
     * @param  {...args}  不定参数，事件信息
     */
    this.emit = function() {
      let key, args
      if(!arguments.length) {
        return false
      }

      key = arguments[0]
      args = [].concat(Array.prototype.slice.call(arguments, 1))

      if(_evtOn[key] && _evtOn[key].length) {
        for(let i in _evtOn[key]) {
          _evtOn[key][i].apply(null, args)
        }
      }

      if(_evtOne[key] && _evtOne[key].length) {
        for(let i in this.oneObj[key]) {
          _evtOne[key][i].apply(null, args)
          _evtOne[key][i] = void(0)
        }
        _evtOne[key] = []
      }
    }

    $el.attr(SID, this.constructor.mrType)
    registerRuntime(this, $el[0])
  }

  static register(ClassObj, typeName) {
    ClassObj.mrType = typeName
    runtime.classPool[typeName] = ClassObj
  }

  getContext() {
    return context
  }

  getOptions(defConfig = {}) {
    return $.extend(true, {}, defConfig, this.__options)
  }

  destroy() {
    destroyRuntime(this)
  }

  _getDOMConfig(el) {
    const $el = getEl(el || this.$el)

    // el 非法时，返回 {}
    if(typeof($el) === undefined) return {}

    const dataset = $el[0].dataset
    const objDataset = getObjectAttr($el, 'datas-')

    // console.log(objDataset)

    return $.extend({}, dataset, objDataset)
  }
}

function getObjectAttr($el, flag = 'datas-') {
  const attr = $el[0].attributes
  let mDataset = {}

  for(let i = 0; i < attr.length; i++) {
    let name = attr[i].name
    let val = attr[i].value

    if(name.indexOf(flag) > -1) {
      name = name.replace(flag, '')
      mDataset[name] = parseJson(val)
    }
  }

  return mDataset
}

function parseJson(str) {
  try {
    return JSON.parse(str)
    // return eval('Object(' + str + ')')
  } catch(e) {
    return null
  }
}

export default BaseModule
