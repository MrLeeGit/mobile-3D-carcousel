let _onObj = {}
let _oneObj = {}

const event = {
  /**
   * 监听事件
   * @param  {String}   key 事件名称
   * @param  {Function} fn  回调函数
   */
  on(key, fn) {
    if(_onObj[key] === undefined) {
      _onObj[key] = []
    }

    _onObj[key].push(fn)
  },

  one(key, fn) {
    if(_oneObj[key] === undefined) {
      _oneObj[key] = []
    }

    _oneObj[key].push(fn)
  },

  off(key) {
    _onObj[key] = []
    _oneObj[key] = []
  },

  emit() {
    let key, args
    if(!arguments.length) {
      return false
    }

    key = arguments[0]
    args = [].concat(Array.prototype.slice.call(arguments, 1))

    if(_onObj[key] && _onObj[key].length) {
      for(let i in _onObj[key]) {
        _onObj[key][i].apply(null, args)
      }
    }

    if(_oneObj[key] && _oneObj[key].length) {
      for(let i in this.oneObj[key]) {
        _oneObj[key][i].apply(null, args)
        _oneObj[key][i] = void(0)
      }
      _oneObj[key] = []
    }
  }
}

const eventPlus = {
  showEvents(type) {
    const events =  {
      on: Object.keys(_onObj),
      one: Object.keys(_oneObj)
    }

    return type ? events[type] : events
  }
}

const superEvent = $.extend(eventPlus, event)

export {
  event,
  superEvent
}
